var isIE = false; //$.browser.msie;
var intKey = 0;
var stepKey = 0;
var cifra;
var arrChordsUsed = chordsUsed.split(" ")
var leftHanded = false
var isHideChords = false;
var maxY;
var cursorX, cursorY;
var isShowChords = false;
var originalCifra; 
var bolChordsOnLyrics = false
var dropKeyOpened = false
var invChanged = new Array()
var floatingChord = 0;
var timeFloatingChord = new Array()
var floatChordZIndex = 300
var count;
var cache = new Array();
var startFloatChord;
var killFloatChord;
var heightBanner = 120
var printVersion = false;
notas_musicais = new Array ();notas_musicais[1] = new Array('C', '');notas_musicais[2] = new Array('C#', 'Db');notas_musicais[3] = new Array('D', '');notas_musicais[4] = new Array('Eb', 'D#');notas_musicais[5] = new Array('E', '');notas_musicais[6] = new Array('F', '');notas_musicais[7] = new Array('F#', 'Gb');notas_musicais[8] = new Array('G', '');notas_musicais[9] = new Array('G#', 'Ab');notas_musicais[10] = new Array('A', '');notas_musicais[11] = new Array('Bb', 'A#');notas_musicais[12] = new Array('B', '');




var isLoggedIn = false ;//(GetCookie ('cifmb') != '' && GetCookie ('cifmb') != null);//var isP;

//$.get('ajax.asp', 'acao=get_status', function(r){isP = r.isP;}, 'json')

jQuery.fn.replaceChords = function(tone) {
	cont = 0
	if (tone == undefined) tone = intKey
	return this.each(function(){
		element = $(this);
		$(this)
		.html(retornaNovaNota2(element.html(), tone, true))
	});
};


jQuery.fn.replaceChordsA = function(replacement) {
	//cont = 0
	return this.each(function(){
		
		element = $(this);
	
		ch = retornaNovaNota2(element.html(), intKey, false)
		$(this)
		.html(ch)
		.attr('rel', ch)
	});
};

function sizeUp(val)
{
	$("#core").css({fontSize: parseInt($("#core").css('font-size')) + val * 2  })

	maxY = $('#request').position().top - (250 - heightBanner)
}
function procuraNota(strNota3) {
	for (n1=1; n1<=12; n1++) {if (notas_musicais[n1][0] == strNota3 || notas_musicais[n1][1] == strNota3) break	}
	return n1;
}
function retornaNota(strNota1, intTom) {
var id = procuraNota(strNota1);
if (id == 13) return strNota1
if (intTom < 0) {intTom += 12;}
if (intTom > 12) intTom = intTom % 12;
var novo_id = id + intTom;
if (novo_id > 12) novo_id = novo_id % 12;
strNota1 = notas_musicais[novo_id][0];
return strNota1;
}
var cont = 0;
function retornaNovaNota2(strNota2, intTom, poeTags) {
strNota2 += ' ';nova_nota = ''; nota_2 = ''; tamanho = strNota2.length; acorde = '';aberto = false;
for (pos = 0; pos < tamanho; pos ++)
{
	nova_nota += strNota2.substr(pos, 1);
	notaFutura = nova_nota + strNota2.substr( pos + 1, 1) // + '*'
	if ((strNota2.substr(pos, 1) == ' ' || strNota2.substr(pos, 1) == '\t') && aberto)  
	{
		aberto = false
			//nota_2 += '<a onMouseOver="MD(\'' + acorde + '\')" rel="' + acorde + '" id="a' + (cont++) + '">' + acorde + '</a>'
		if (poeTags)
		{
			nota_2 += '<a title="click to drag & drop chord" onmouseOut="MD2(' + cont + ')" onMouseOver="MD(' + cont + ')" rel="' + acorde + '" id="a' + (cont++) + '" onclick="MD3(' + cont + ')">' + acorde + '</a>'
		}
		else
			nota_2 += acorde
		acorde = ''
		txtAcorde = ''
	}
	if (strNota2.substr(pos, 1) != ' ' && strNota2.substr(pos, 1) != '\t' && !aberto) 
	{ aberto= true;acorde = '';txtAcorde = '' }
	if (procuraNota(notaFutura) == 13) 
	{
		if (intTom == 0) acorde += nova_nota
		else 
		acorde += retornaNota (nova_nota, intTom);nova_nota = '';
	} 
	if (!aberto && pos < tamanho - 1) nota_2 += strNota2.substr(pos, 1)
}
return nota_2;
}






function inCollection(arr, index)
{
	var n = 0
	for (nn in arr)
	{
		if (n == index) break
		n ++
	}
	return nn
}
function openWait(){ 	$('body').css('cursor','progress') }
function closeWait() {$('body').css('cursor','auto')}

function keyChange(key)
{
	
	$("#key_active").html(key)
	for (n = 0; n < 11; n ++)
	{
		addTxt = ""
		if (n == 0) addTxt = " <i>half step up</i>"
		if (n == 1) addTxt = " <i>one step up</i>"
		if (n == 9) addTxt = " <i>one step down</i>"
		if (n == 10) addTxt = " <i>half step down</i>"
		$("#key_" + n).html( retornaNovaNota2(key, n + 1) + addTxt )
	}
	
	
}


function changeKey(key)
{
	if (bolChordsOnLyrics) return false
	//setTimeout("$.scrollTo( '.miolo', 900)", 300);reloadFrames()
	key ++
	//alert(key)
	chordsUsed = retornaNovaNota2(chordsUsed, key , false)
	chordsDefault = retornaNovaNota2(chordsDefault, key, false)
	

	//var chords1 = retornaNovaNota2(chordsUsed, key - 1, false)
	var chords1 = chordsUsed
	//var chords2 = escape(retornaNovaNota2(chordsDefault, key - 1, false))
	var chords2 = escape(chordsDefault)
	
	arrChordsUsed = chords1.split(" ")
	//openWait()
	
	
	
	
	
	$.get('ajax.asp', 'action=CHANGE_KEY&p=' + chords1.replaceAll('#', '%23').replaceAll('+', '%2B').replaceAll('/', '%2F') + '&p2=' + chords2 + '&p3=' + key + '&p4=' + typeInstrument, function(r){ 
			
			$("#actions").html(r)

			//intKeyTemp = intKey
			intKey = key 
			stepKey += intKey
			$("#key_active").html( retornaNovaNota2(strKey, key ) )
			strKey = $("#key_active").html()
			$('#key_options li').each(function(){
				
				$(this).attr('title', parseInt($(this).attr('title')) - parseInt(intKey) )
			
			})


			//$('#core').html(cifra); 
			//$('#core').html("<pre>" + cifra + "</pre>")

			$('#core a').replaceChordsA();

			if (typeInstrument == "ukulele")
			{
				//chordsUsed="";
				for (var n = 0; n < arrChordsUsed.length; n ++)
				{
					if (arrChordsUsed[n] > " ")
					{
					// mudando o nome do acorde
					acorde = new cifrasChords();
					//alert("1." + arrChordsUsed[n])
					//arrChordsUsed[n] = fourStringChords(removeBaixo(arrChordsUsed[n])).chordName
					acoUku = arrChordsUsed[n]
					
					chords[acoUku] = new Array();
					acoUku2 = acoUku.replaceAll("Eb", "D#")
					chords[acoUku].variations = acorde.getNotes(acoUku2, 2, escalaUku)
					//chords[acoUku].inversions = ""
					//chordsUsed += acoUku + " "
					//alert("2." + acoUku + " - " + chords[acoUku].variations)
					}
				}	
				
			}



			
					
			drawGlossary()
			
			keyChange(strKey)
			
	}) 
	
}
/*
function drawFloatingChords(paramChords)
{
	//'flchord_' + floatingChord
	
	arrParamChords = paramChords.split(" ")

	for (var n = 0; n < floatingChord; n ++)
	{
		rel = $('#flchord_' + n).attr('rel')		
		
		if (rel != undefined) { // && chords[$('#flchordcontent_' + n + ' > div:eq(0)').html()] != undefined){
		
		try
		{
		drawChord({
		'div': 		'flchordcontent_' +  n  ,


		'chordname':arrParamChords[rel],
		'variations':chords[arrParamChords[rel]].variations,
		'photosvar':'photos',
		'type':typeInstrument,
		'lefthanded':leftHanded
		})
		}
		catch(e)
		{
		
		}



		}
	
	}

}*/
function checkTagU(line)
{
	g1 = line.match(/<u>/gi)
	g2 = line.match(/<\/u>/gi)
	
	g1 = (g1 == null ? 0 : g1.length)
	g2 = (g2 == null ? 0 : g2.length)
	
	//alert("line (dentro do if): " + line + " <u>: " + g1.length + " </u>:" + g2.length)
	
	if(g1 < g2)
	{
		line = "<u>" + line
		//alert(line)
	}
	if(g2 < g1)
	{
		line += "</u>"
		//alert(line)
	}
//				text.match(/<u>/gi).length
	return line
}

function stripTagsA(txt)
{
	//var reg = new Regexp("<[//]{0,1}(" + tags + ")[^><]*>", "gi")
	pos = 0
	while (pos > -1){
		txt = txt.replace(/<[//]{0,1}(a)[^><]*>/gi, '');
		//txt = txt.replace(reg, '');
		pos = txt.indexOf('<a');
	}
	return txt
}

function stripTagsU(txt)
{
	pos = 0
	while (pos > -1){
		txt = txt.replace(/<[//]{0,1}(U)[^><]*>/gi, '');
		pos = txt.indexOf('<u');
	}
	return txt
}




function showDrawings()
{
	//alert(bolChordsOnLyrics)
	var n = 0 
	var x= 0
	if (!bolChordsOnLyrics)
	{
		$('#core').css({'line-height':'2.5em'})
		$('#core a').each(function(){
	
		if (n > 0) x = element.position().left
		element = $(this);
		
		if (chords[element.html()] != undefined)
		$(this)
		.html('<img src="https://www.cifras.com.br/imagens/c3/chordimage.asp?chord=' + chords[element.html()].variations.split(" ")[0].replaceAll(",", " ") + '" rel="' + element.html() + '">')
		.css({position: 'absolute', 'margin-top': (isIE ? -10 : 0),	'margin-right':30})
		dist = element.position().left - x
		if (dist > 0 && dist < 36)
		{
			//alert(dist + " " + element.position().left)
			element.css({"left": x + 35 - (isIE ? 155 : 0) })
		}	
		n = 2
		})//.unbind('mouseenter');
	}
	else
	{
		$('#core').css({'line-height':'16px'})

		
		$('#core a').each(function(){
			$(this).html($(this).attr('rel'))
		}).removeAttr('style')
	//	cifra = originalCifra
		//$('#core').html("<pre>" + cifra + "</pre>")
		//$('#core u').replaceChords()
		maxY = $('#request').position().top - (250 - heightBanner)
		/*if (isSplitColumns)
		{
			isSplitColumns = false;
			splitColumns();
		}*/
		//init()
		$("#core a").css({'color': '#' + color[0]})
		$("#core").css({'color': '#' + color[1]})
	}
	bolChordsOnLyrics = !bolChordsOnLyrics;
}

function fixIEWhiteSpaces() {
	nova_cifra = cifra
	ret = ""
	var n = 0 
	//alert(nova_cifra)
	pos1 = 0
	while (pos1 > -1)
	{
		pos1 = nova_cifra.indexOf("<u>") 
		if (pos1 == -1)	break
		pos2 = nova_cifra.indexOf("</u>") 
		//alert(nova_cifra.substring(pos1 +3, pos2))
		

		if (  nova_cifra.substring(pos1+3, pos2).indexOf(" ") > -1)
		{
			spaceChords = nova_cifra.substring(pos1+3, pos2)
			newSpaceChords = ""
			note = false
			for (nn = 0; nn < spaceChords.length; nn++)
			{
				char1 = spaceChords.substr(nn,1);
				if (char1 != " " && !note)
				{
					newSpaceChords += "<u>"
					note = true
				}
				if (char1 == " " && note)
				{
					newSpaceChords += "</u>"
					note = false
				}
				newSpaceChords += char1
				
				
			}
			if (note) newSpaceChords += "</u>"
			
			newSpaceChords = "</u>" + newSpaceChords //+ "<u>"
			
			
		}
		else
		{
			newSpaceChords = nova_cifra.substring(pos1+3, pos2) + "</u>"
		}
		ret += nova_cifra.substr(0,pos1 + 3) + newSpaceChords
		
		nova_cifra = nova_cifra.substr(pos2 + 4 )
		//alert(nova_cifra)
		n ++
		if (n > 1000) break
	}
	ret += nova_cifra.substr(0)
	ret = ret.replaceAll("<u></u>", "")
	return ret
}


function addChord(txt)
{
	//alert('ajax.asp?acao=add_chord&p=' + escape(txt))
	txt = txt.replaceAll("+", "@")
	if (cache['addchord_' + escape(txt)] == undefined)
	$.get('ajax.asp', 'acao=add_chord&p=' + escape(txt) + '&p2=' + typeInstrument, function(r){ 
		cache['addchord_' + escape(txt)] = r
		$("#actions").html(r)
	})
	else
	$("#actions").html(cache['addchord_' + escape(txt)])
}


var isShowTabs = true;
function showTabs()
{
	var heights = new Array()
		$('.tabbt').each(function(){

			rel = $(this).attr('rel')
			elem = $('.hide_tab[rel=' + rel + ']')
			//heights[rel] = parseInt(elem.css('height'))
			if (isShowTabs)
			{

				if (elem.css('display') == 'block')
				{
					elem.animate({

							height:1
							}, 'fast', '', 
							function(){
								maxY = $('#request').position().top - (250 - heightBanner)
								
								//$(this).css({'display': 'none', height: heights[$(this).attr('rel')]})
								$(this).css({'display': 'none'})
								$('.tabbt[rel=' + $(this).attr('rel') + ']').css({'border-bottom':'solid 2px #DEDEDD'}).html('exibir tablatura<img src="' + static_server + 'images/st6.png" width="8" height="9" alt="exibir" style="margin-left: 15px;" />')
							})			
				
				}
				$('.subtools a:eq(2)').html('exibir tabs')
			}
			else
			{
				if (elem.css('display') == 'none')
				{
					$('.tabbt[rel=' + $(this).attr('rel') + ']').css({'border-bottom':'0'}).html('esconder tablatura<img src="' + static_server + 'images/st5.png" width="8" height="9" alt="esconder" style="margin-left: 15px;" />')
							elem.css({'display': 'none', height: 0})
							elem.animate({
							height: $('.tabbt[rel=' + $(this).attr('rel') + ']').attr('class').substr(6) //  heights[$(this).attr('rel')]
							}, 'fast', '', function(){
									maxY = $('#request').position().top - (250 - heightBanner)
							})			
				}
			
			$('.subtools a:eq(2)').html('esconder tabs')
			}
		

		})
		isShowTabs = !isShowTabs
}
function simplify2(val, chordsTemp){

			if (val >= count) //chordsUsed > '') 
			{
				
				chordsUsed = chordsTemp
				chordsDefault = padronizeChords(chordsUsed)
				changeKey(1)
				/*drawGlossary()
				drawFloatingChords(chordsUsed)
				setInversionsDiv()*/
				clearInterval(continueSimplify)
			}
}



function padronizeChords(chord)
{
	var aco;aco = jQuery.trim(chord)
	aco = aco.replaceAll(" ", ",");aco = aco.replaceAll("/", " ");aco = aco.replaceAll("(", " ");aco = aco.replaceAll(")", " ");	
	aco = aco.replaceAll("Eb", "D#");aco = aco.replaceAll("Bb", "A#");aco = aco.replaceAll("Db", "C#");aco = aco.replaceAll("Ab", "G#");aco = aco.replaceAll("Gb", "F#");aco = aco.replaceAll("add3", "");aco = aco.replaceAll("2", "9");
	aco = aco.replaceAll("sus4", "4");aco = aco.replaceAll("sus9", "9");aco = aco.replaceAll("add", "");aco = aco.replaceAll("sus", "4");aco = aco.replaceAll("74", "7 4");	aco = aco.replaceAll("11", "4");
	aco = aco.replaceAll("13", "6");aco = aco.replaceAll("dim", "°");aco = aco.replaceAll("no", "nn");aco = aco.replaceAll("omit", "nn");aco = aco.replaceAll("º", "°");aco = aco.replaceAll("o", "°");aco = aco.replaceAll("nn", "no");aco = aco.replaceAll("+", "M");aco = aco.replaceAll("aum", "M");
	aco = aco.replaceAll("5-","4M");aco = aco.replaceAll("6-","5M");aco = aco.replaceAll(" b5"," 4M");
	aco = aco.replaceAll(" b6"," 5M");aco = aco.replaceAll(" #5"," 5M");aco = aco.replaceAll(" #4"," 4M");aco = aco.replaceAll("5b","4M");aco = aco.replaceAll("9b","9-");aco = aco.replaceAll(" b9"," 9-");aco = aco.replaceAll("79", "7 9");
	aco = aco.replaceAll("aug", "5M");aco = aco.replaceAll("maj7", "7M");aco = aco.replaceAll("  ", " ");aco = aco.replaceAll(" ,", ",");
	aco = jQuery.trim(aco);
	return aco
}

function MD (id, start) {



	if (bolChordsOnLyrics) return false
	elem = $('#a' + id)
	chorname = elem.html()
	if (chords[chorname] == undefined) return false

	cursorY = $('#a' + id).position().top + 225 
	cursorX = $('#a' + id).position().left - 365
	$("#flchord").css({
				top: cursorY,
				left: cursorX,
				'margin-left':'50%',
				zIndex: 300,
				display: 'block',
				'border':'solid 1px #CCC'
				
				
				
				
				});
								//'border-radius':'5px',
	drawChord({
		'div': 		'flchord',
		'menu': 	(typeInstrument == 'keyboard' ? '' : ''),
		'chordname':chorname,
		'variations':chords[chorname].variations,
		'photosvar':'photos',
		'type':typeInstrument,
		'lefthanded':leftHanded
		});	
	
	
}

(function($) {
    $.fn.drags = function(opt) {

        opt = $.extend({handle:"",cursor:"move"}, opt);

        if(opt.handle === "") {
            var $el = this;
        } else {
            var $el = this.find(opt.handle);
        }

        return $el.css('cursor', opt.cursor).on("mousedown", function(e) {
            if(opt.handle === "") {
                var $drag = $(this).addClass('draggable');
            } else {
                var $drag = $(this).addClass('active-handle').parent().addClass('draggable');
            }
            var z_idx = $drag.css('z-index'),
                drg_h = $drag.outerHeight(),
                drg_w = $drag.outerWidth(),
                pos_y = $drag.offset().top + drg_h - e.pageY,
                pos_x = $drag.offset().left + drg_w - e.pageX;
            $drag.css('z-index', 1000).parents().on("mousemove", function(e) {
                $('.draggable').offset({
                    top:e.pageY + pos_y - drg_h,
                    left:e.pageX + pos_x - drg_w
                }).on("mouseup", function() {
                    $(this).removeClass('draggable').css('z-index', z_idx);
                });
            });
            e.preventDefault(); // disable selection
        }).on("mouseup", function() {
            if(opt.handle === "") {
                $(this).removeClass('draggable');
            } else {
                $(this).removeClass('active-handle').parent().removeClass('draggable');
            }
        });

    }
})(jQuery);



var intervalChord = new Array();
function MD3 (id) {
	//alert(1)
	floatingChord ++;
	$("#flchord").clone().attr("id", "flchord_" + floatingChord).appendTo("body")
	html = '<div id="bar_' + floatingChord + '" style="overflow:hidden;display:block;background-image:url(\'../images/bg_login2.png\');cursor:move;position:absolute;margin-top:-15px;margin-left:-1px;background-color:#ccc;height:12px;border:solid 1px #000;width:100%;text-align:center;border-radius:4px 4px 0 0"><img style="margin-top:2px" src="images/drag-icon.png"><img width="11" style="margin-right:1px;float:right" src="http://www.manageengine.com/products/ad-manager/images/close-button.gif" onclick="closeFlchord(' + floatingChord + ')"></div>'
	$(html).insertBefore("#flchord_" + floatingChord + " .chordtitle")
	
	$("#flchord_" + floatingChord).drags()
	.bind('mouseenter', function(){
		showDragBarChord($(this).attr("id").split("_")[1])
	}).bind('mouseleave', function(){
		hideDragBarChord($(this).attr("id").split("_")[1])
	})
	
	intervalChord[floatingChord] = setTimeout('hideDragBarChord(' + floatingChord + ')', 2000)
	

	
}
function showDragBarChord(id)
{
	$("#flchord_" + id).css({'border':'solid 1px #CCC'})
	obj = $("#bar_" + id)
	obj.show()
	//obj.animate({'height':12, 'top':0},'fast',function(){$(this).show()}) //.show()	
	clearInterval(intervalChord[id])
	
}
function hideDragBarChord(id)
{
	$("#flchord_" + id).css({'border':0})
	obj = $("#bar_" + id)
	obj.hide()
	//obj.animate({'top':17,'height':0},'fast',function(){$(this).hide()})//.hide()	
	clearInterval(intervalChord[id])
	
}
function closeFlchord(id)
{
	$("#flchord_" + id).remove()
	clearInterval(intervalChord[id])
	
}
function MD2(id)
{
	$("#flchord").hide()
	
	
}

var levelScroll = 0;
var intervalScroll;
function overLevel(level)
{
	if (level == undefined)
	{
		for (var n = 1; n <= 5; n ++)
		{
			obj = document.getElementById("scroll_0" + n);
			if (n <= levelScroll)
				obj.style.backgroundImage = "url(" + static_server + "images/scroll_square" + n + ".png)";
			else
				obj.style.backgroundImage = "url(" + static_server + "images/scroll_square.png)";
		}
	}
	else
	{
		for (var n = 1; n <= 5; n ++)
		{
			obj = document.getElementById("scroll_0" + n);
			if (n <= level)
				obj.style.backgroundImage = "url(" + static_server + "images/scroll_square" + n + ".png)";
			else
				obj.style.backgroundImage = "url(" + static_server + "images/scroll_square.png)";
		}
	}
}

function freeCopy() {$("body").unbind('copy')}




String.prototype.replaceAll = function(de, para){
    var str = this;
    var pos = str.indexOf(de);
    while (pos > -1){
		str = str.replace(de, para);
		pos = str.indexOf(de);
	}
    return (str);
}





var windowsChanged = false;
var propBoticario = 0






var videoUpper = false;
function changeVideoSize()
{
	if (!videoUpper)
	{
	$("#myytplayer").css({width:450,height:330})	
	$("#ytplayer").css({'left': '460px'})
	videoUpper = true
	}
	else
	{
	$("#myytplayer").css({width:300,height:220})	
	$("#ytplayer").css({'left': '610px'})
	videoUpper = false
	}
}
function showYT(search)
{
	$("#view_yt").html("<img src='images/wait-icon.gif' /> loading...")
	if (videoUpper) changeVideoSize()
	html = '<div style="height:20px;color:white;float:right;cursor:pointer"><img onclick="changeVideoSize()" src="images/iconvideo.png" width=16 style="margin-right:5px" alt="change the size of the video window" /><img onclick="closePlayer()" src="images/iconclose.gif" alt="close video window" width=16 /></div><iframe id="myytplayer" class="youtube-player" type="text/html" width="300" height="220" src="http://www.youtube.com/embed/[VIDEO]?enablejsapi=1&autoplay=1&fs=1" frameborder="0"></iframe>'
	if (search.indexOf("codvideo=") > - 1) 
	{
		$("#ytplayer").show()
		video = search.replace("codvideo=", "")
		$("#ytplayerin").html(html.replace("[VIDEO]", video))  //'<div style="height:20px;color:white;float:right;cursor:pointer"><img onclick="closePlayer()" src="images/iconvideo.png" width=16 style="margin-right:5px" /><img onclick="closePlayer()" src="images/iconclose.gif" width=16 /></div><iframe id="myytplayer" class="youtube-player" type="text/html" width="300" height="220" src="http://www.youtube.com/embed/' + search.replace("codvideo=", "") + '?enablejsapi=1&autoplay=1&fs=1" frameborder="0"></iframe>')
		$("#view_yt").html("How to play lesson")
		
		
		score1 = $("a[rel^=" + video + "]").attr("rel")
		score1 = score1.split(",")
		if (score1[2] == 0) score1[2] = 1
		score1 = score1[1] / score1[2]
		$('#rating').raty({path: 'js/raty/images', score: score1, 
			click: function(score, evt) {
				if (cache['rate_video_' + video] == undefined)
				{
					$.get('ajax.asp', 'action=rate_video&p='+ video + '&p2=' + score, function(r){
						cache['rate_video_' + video] = true
						$('#rating').raty({path: 'js/raty/images', readOnly: true, score: score})
					
					})
				}
				else
				{
					//alert('You've already rated this video')	
				}
				

    			
  			}
  		});
		
		
		
	}
	else
	{
		$('#rating').raty({path: 'js/raty/images', readOnly: true, score:0,noRatedMsg : "This video wasn't submitted from any member yet, it's only a suggestion"});
		if (cache['ytplayer'] == undefined)
		$.get('ajax.asp', 'action=show_video&p=' + search, function(r){
	
			if (r == "ERROR")
			{
				$("#view_yt,#ytplayer").css('display','none')	
			}
			else
			{
				$("#ytplayer").show()
				$("#ytplayerin").html(html.replace("[VIDEO]", r)) //'<div style="height:20px;color:white;float:right;cursor:pointer"><img onclick="closePlayer()" src="images/close_icon.gif" width=16 /></div><iframe id="myytplayer" class="youtube-player" type="text/html" width="300" height="220" src="http://www.youtube.com/embed/' + r + '?enablejsapi=1" frameborder="0"></iframe>')
		
			}
			cache['ytplayer'] = r
			$("#view_yt").html("How to play lesson")
			
			
		})
		else
		{
			$("#ytplayer").show()
			$("#ytplayerin").html(html.replace("[VIDEO]",cache['ytplayer'])) //'<div style="height:20px;color:white;float:right;cursor:pointer"><img onclick="closePlayer()" src="images/close_icon.gif" width=16 /></div><iframe id="myytplayer" class="youtube-player" type="text/html" width="300" height="220" src="http://www.youtube.com/embed/' + cache['ytplayer'] + '?enablejsapi=1" frameborder="0"></iframe>')
			$("#view_yt").html("How to play lesson")
		}
	}
	

		

}
function closePlayer()
{
	
	$("#myytplayer").remove()
	$("#ytplayer").hide()
	
}
function showMoreVideos()
{
	if ($("#textmorevideos").text() == "show video lessons")
	{
		$("#morevideos").animate({height:120},'fast')	
		$("#textmorevideos").text("hide video lessons")
	}
	else
	{
		$("#morevideos").animate({height:0},'fast')	
		$("#textmorevideos").text("show video lessons")
	}
}



// **************************************


 function sendtags()
 {
	$.get('ajax.asp', 'action=add_tag&p=' + id_song + '&p2=' + escape($("#tag").val()), 
	function(r){ 
		$("#entertag").html('Thanks for your contribution!')
	
	})	 
	 
 }
 function clickNone()
 {
	//if ($("#tagnone").attr("rel") ==  
	$("#tagnone, #tags").hide()
	$("#entertag").show()
	
	
 }
 var subGenre = false
 var genre = ''
 function clickTag(tag)
 {
	$.get('ajax.asp', 'action=add_tag&p=' + id_song + '&p2=' + escape(genre + tag), 
	function(r){ 
		
	
	})		
	
	
	if (tag == "Rock" && !subGenre)
	{
		fillTags(1)
		subGenre = true
		genre = tag + ','
		

	}
	else if (tag == "Pop" && !subGenre)
	{
		fillTags(2)
		subGenre = true
		genre = tag + ','
		

	}
	else if (tag == "Country" && !subGenre)
	{
		fillTags(3)
		subGenre = true
		genre = tag + ','

	}
	else if (tag == "Christian" && !subGenre)
	{
		fillTags(4)
		subGenre = true
		genre = tag + ','

	}
	else
	{
		//$("#tags,#entertag,#tagnone").hide()
		$("#maintags").html('Thanks for your contribution!')		
	}
 }
 function fillTags(num)
 {
	var html = ""
	for (var n= 0; n < arrTags[num].length; n ++)
	{
		html += '<div onclick="clickTag(\'' + arrTags[num][n] + '\')" style="cursor:pointer;background-color: #444; color: #FFF; margin-bottom: 5px; margin-top: 5px; padding: 2px; border-radius: 5px; border: 1px solid rgb(204, 204, 204); font-size: 8pt;" onmouseout="this.style.backgroundColor = \'#444\'" onmouseover="this.style.backgroundColor = \'#000\'">' +  arrTags[num][n] + '</div>'	
		
	}
	$("#tags").hide(400)
	$("#tags").html(html) 
	$("#tags").show(400)
	
	//$("#tagnone").attr('rel',num)
 }
 
 var arrTags = new Array()
 // PRINCIPAIS
 arrTags[0] = new Array('Blues', 'Children\s', 'Christian', 'Country', 'Dance', 'Electronic', 'Jazz', 'International', 'Pop', 'Raggae', 'Rap', 'R&B', 'Rock', 'Traditional')
 // ROCK
 arrTags[1] = new Array('Alternative Rock', 'Classic Rock', 'Country', 'Grunge', 'Hard Rock', 'Heavy Metal', 'Nu Metal', 'Progressive Rock', 'Pop Rock', 'Punk', 'Rock', 'Soft Rock', 'Thrash Metal')
 // POP
 arrTags[2] = new Array('Christian', 'Country', 'Latin Ballad', 'Pop', 'Pop Rock', 'Soft Rock')
 // COUNTRY
 arrTags[3] = new Array('Blues', 'Christian', 'Rock', 'Pop', 'Soft Rock')
 // CHRISTIAN
 arrTags[4] = new Array('Blues', 'Country', 'Dance', 'Electronic', 'Heavy Metal', 'Pop', 'Punk', 'Reggae', 'Rock', 'Soft Rock', 'Thrash Metal')

function str_replace(haystack, needle, replacement) {
var temp = haystack.split(needle);
return temp.join(replacement);
}


function drawGlossary()
{
	$('#thechords').html(' ')
	x = 0;
	xx = 0
	var cols, height
	switch (typeInstrument)
	{
		case 'keyboard':
			cols = 2
			height = 110
			break
		case 'ukulele':
			cols = 5
			height = 155
			break
		default:
			cols = 5
			height = 155
	
	}

	for (var z in chords){
		if (x % cols == 0)
		{
			xx ++
			$("<div></div>").appendTo('#thechords').attr('id', 'spanchords_' + xx).css({'height':height, 'overflow':'hidden'})
		}
		$("<div></div>").attr({ 'id' : 'thechord_' + x }).addClass('drawchord').appendTo('#spanchords_' + xx)
		drawChord({'div':'thechord_' + x,'menu':'V','type':typeInstrument,'chordname':z,'variations':chords[z].variations,'photosvar':'photos', 'lefthanded':leftHanded})
	
		x ++;
	};
	$('#thechords').css({height: parseInt(x/cols) * (height + 5) + (x % cols == 0 ? 0 : (height + 5)) })
}

// *******************************************************
// *******************************************************
$(document).ready(function(){

fillTags(0)	


	//drawGlossary()
	
	//$("#ytplayer").drags()
	heightBanner = 0
$("#autoscroll").stickyfloat({
	duration: 0, 
	});

$("#ytplayer").stickyfloat({
	duration: 0, 
	});

// change key
$("#keyselection").dropit();	



	//autoscroll
	var scrollactive = false;
	$("#tool_autoscroll").click(function() {
		if (scrollactive) {		
			$("#autoscroll").hide();
			$("#tool_autoscroll").html("Start AutoScroll");
			scrollactive = false;
		} else {
			$("#autoscroll").show();
			$("#tool_autoscroll").html("Hide AutoScroll");
			scrollactive = true;
				}
	});
	
	//chords
	var chordsactive = false;
	$("#tool_chords").click(function() {
		if (chordsactive) {		
			$("#showchords").hide();
			$("#tool_chords").html("Display Chords");
			chordsactive = false;
		} else {
			$("#showchords").show();
			$("#tool_chords").html("Hide Chords");
			chordsactive = true;
				}
	});
	

	
	//modais
//print version
	var printver = true
	var elementos = $("#msgfooter, #tagit2, .topo, #superior, .container_column, #rodape, #login_bar, .header_full, #keyselection, #banner300, #add_songbook, #view_yt, #share_chord, .bottomline, .fb-meta, #submitvideo")
	$("#print_version").click(function() {
		if (printver) {
			elementos.hide();
			$(".tabs h1 b, #logo_print").show();
			$(this).html("Cancel Print");	
			$("#core u").css("color","#000");
			$("#column_full").addClass("column_print");
			printver = false;
			
		} else {
			elementos.show();
			$(".tabs h1 b, #logo_print").hide();
			$("#core u").css("color","#d3794d");
			$(this).html("Print Version");	
			$("#column_full").removeClass("column_print");	
			printver = true	;	
		}
	});

	$(".fancyopen").fancybox({
		type: 'iframe',
		padding: 5,
		margin: 0,
		title: '',
		helpers : {
			overlay : {
				css : {
					'background-image' : 'url(../images/bg_legenda_vitrine.png);'
				}
			}
		}
		});


if (album_site_readed == "") {
	$.get('ajax.asp', 'action=get_album&p=' + escape(cod_artist) + '&p2=' + cod_song + '&p3=' + id_song + '&p4=' + id_artist, 
	function(r){ 
		if (r.status = "ok")
		{
			
		}
		else
		{
		
			
		}
	
	
	
	}, 'json')

}




	
	if (id_type != 9) {
		
		
	drawGlossary()
	keyChange(strKey)
	var hash = window.location.hash.substr(1) + "";
	if (hash != "") {
			showYT('codvideo=' + hash)
			$("#facebook_chord").attr("href", $("#facebook_chord").attr("href") + "#" + hash)
	}
	
	$(".listvideo").each(function(){

		score1 = $(this).attr("rel")
		//alert(score1)
		score1 = score1.split(",")
		if (score1[0] == 0) score1[1] = 1
		score1 = score1[0] / score1[1]
		$(this).raty({path: 'js/raty/images', score: score1, readOnly:true})
			
		
	})
	
	
	//checa a largura maxima em caracteres da tablatura
	arr = $("#core").text().split("\n")
	maxChar = 0
	maxCharFirst7 = 0
	maxCharFirst20 = 0
	for (var n = 0; n < arr.length; n++)
	{
		if (arr[n].trim().length > maxChar) maxChar = arr[n].trim().length
		if (arr[n].trim().length > maxCharFirst7 && n < 7) maxCharFirst7 = arr[n].trim().length
		if (arr[n].trim().length > maxCharFirst20 && n < 18) maxCharFirst20 = arr[n].trim().length
	}
	if (maxCharFirst20 < 64) $("#tool_sizeup").click()
	if (maxCharFirst7 > 68) {
		$("#banner300").remove()	
		$("#bannershare").stickyfloat({
			duration: 0, 
		});
	}
	
	$("#key_options li").click(function() {	
		var x = $(this)
		var k = x.attr('id').split('_')[1];
		//alert(k);
		var k_text = x.html();	
		changeKey(k)
		//alert(k_text)
		
	})		
		
		
		
		
		
	cifra = $('#core').html(); 
	cifra = cifra.replaceAll("U>", "u>")//.replaceAll("</U>", "</u>");
	if (isIE) 
	{	
		cifra = fixIEWhiteSpaces();
		$('#core').html("<pre>" + cifra + "</pre>");
	}

	originalCifra = cifra
	}
	
 

	$('#core u').replaceChords()
$('#core').css({'line-height':'16px'})
if (fonte_fixa == "1") $('#core pre').css('font-family','arial')
	
	


y =  $(window).scrollTop()




$(".dropmenu").each(function(){

	var h1
	h1 = $(this).height()
	
	$("#" + $(this).attr("rel")).attr("rel",h1)
})

$(".dropmenu").each(function(){
	var obj = $(this)
	$("#" + $(this).attr("rel")).click(function() {
		obj.show().css('height', 0).animate({'height': $(this).attr("rel") + 'px','border':'1px solid #990000'}, 100)
	})

}).bind('mouseleave', function(){
	$(this).animate({'height':0}, 100, function() { 
		$(this).hide().css({'border':0}) 
	})			
})






$('#t_simplify').click(
	function(){
		if (bolChordsOnLyrics) return false
		chordsUsed = ''
		chordsDefault = ''

		chords = new Array()
		$('#songtitle, .echord h1').html(title + ' (Versão Fácil)')
		chordsTemp = ''
		n = $('#core a').size()
		$('.echord_ico').attr('src', 'images/icons/easy50.png')
		count = 0
		$('#core a').each(
			function(){
				
				element = $(this);
				//element.html( 'A7'  ).attr('rel', 'A7')
				var rel = padronizeChords(element.html())
				var arrAcidentes = (rel).split(" ")
				ch = arrAcidentes[0].substr(0,1)
				l = arrAcidentes[0].length
				
				if (rel.length > 1)
				{				
					for (var nn = 1; nn >= 0; nn --)
					{
						char = rel.substr(nn, 1)
						if (("#b°m").indexOf(char) > -1) 
							ch += char
						else
							break
					}
					char = rel.substr(2, 1)
					if (("#b°m").indexOf(char) > -1) 
						ch += char
					
					
								
					if (arrAcidentes.length > 2)
						final = arrAcidentes.length - 1
					else
						final = arrAcidentes.length
	
					for (nn = 1; nn < final; nn++)
					{
						if ( 
						("45679").indexOf( arrAcidentes[nn - 1].substr(0, 1)  ) > -1
						
						||  (  ("CDEFGAB").indexOf( arrAcidentes[nn].substr(0, 1)  ) > -1
							&& ("CDEFGAB").indexOf( arrAcidentes[nn - 1].substr(0, 1)  ) > -1 )
						)
						ch += " "
		
						ch += arrAcidentes[nn]
					}
					ch = ch.replaceAll(' ', '/').replaceAll('4M', '5-')
					
					if ((' ' + chordsTemp + ' ').indexOf(' ' + ch + ' ') == -1) 
					{
					//addChord(ch); 
					chordsTemp += ch + ' '
					}
					element.html('' + ch + '').attr('rel', ch)
					count ++
				}
				else
				{
				chordsTemp += rel + ' '
				//addChord(rel)
				count ++
				}
			})  //.css('cursor', 'pointer')  
			continueSimplify = setInterval('simplify2(' + n + ', \'' + chordsTemp + '\')', 250)
				/*drawGlossary()
				drawFloatingChords(chordsUsed)
				setInversionsDiv()*/
	}
)




	 $(document).keypress(function (e) {


	 	if(e.which == 43) 
		{
			if ($("#autoscroll").css('display') == 'none')
			{
				showScroll()
			}

			setScroll(levelScroll + 1)
		}
	 	if(e.which == 45 && $("#autoscroll").css('display') == 'block' ) setScroll(levelScroll - 1)
		
		
	 })
	
	$('#hp_ac').bind('mouseover', function(){
		$('<div></div>').attr('id','tip_ac').addClass('help')
		.css({'top':cursorY - 100, left: cursorX - 30,'padding':5})
		.html('Click + button to speed up scroll or click - to speed down scroll or you can press + or - on the keyboard')
		.insertAfter('body')
	
	}).bind('mouseout', function(){
		$('#tip_ac').remove()
	})
	

   /* $(".tom").click(function () { 
      if (dropKeyOpened) return false
	  if ($('.tom>div').size() == 0) return false
	  dropKeyOpened = true
	  $("#tons2").show()
	  $(this).animate({
		height: 355,
		width: 170
		}, 'fast')
    }).mouseleave(function(){
		
		$(this).animate({
		height: 54,
		width: 45
		}, 'fast', function(){
	 	$("#tons2").hide()
	 	})
		dropKeyOpened = false
    })



	
	$(".tom a").remove()
	
	$('.tom div')
			.bind('mouseover',function( event ){
			return $( this ).addClass('dropover')

			})

			.bind('mouseout',function( event ){
			return $( this ).removeAttr('class')
			})
			.click(function () { 
			//$(".actualkey").html(  $(this).html().replace(/<.*>/g,""))
	      	changeKey($(this).attr('title'))
			$(".tom").animate({
					height: 54,
					width: 45
					}, 'fast')			
			
		    })
			 
			 
	*/		 

   $().mousemove(function(e){
      cursorX = e.pageX 
      cursorY = e.pageY 
   }); 




//}
});